/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_SERVER_H_
#define JSONRPC_CPP_STUB_SERVER_H_

#include <jsonrpccpp/server.h>

class server : public jsonrpc::AbstractServer<server>
{
    public:
        server(jsonrpc::AbstractServerConnector &conn, jsonrpc::serverVersion_t type = jsonrpc::JSONRPC_SERVER_V2) : jsonrpc::AbstractServer<server>(conn, type)
        {
            this->bindAndAddMethod(jsonrpc::Procedure("SendVoterInfo", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING,"voterInfo",jsonrpc::JSON_STRING, NULL), &server::SendVoterInfoI);
            this->bindAndAddMethod(jsonrpc::Procedure("GetAuthMessage", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"machineId",jsonrpc::JSON_STRING,"message",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING,"voterInfo",jsonrpc::JSON_STRING, NULL), &server::GetAuthMessageI);
            this->bindAndAddMethod(jsonrpc::Procedure("GetBallot", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"message",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING,"voterInfo",jsonrpc::JSON_STRING, NULL), &server::GetBallotI);
            this->bindAndAddMethod(jsonrpc::Procedure("SendVote", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING,"vote",jsonrpc::JSON_STRING,"voterInfo",jsonrpc::JSON_STRING, NULL), &server::SendVoteI);
            this->bindAndAddMethod(jsonrpc::Procedure("GetReceipt", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "action",jsonrpc::JSON_STRING,"class_id",jsonrpc::JSON_STRING,"host_url",jsonrpc::JSON_STRING,"machineId",jsonrpc::JSON_STRING,"message",jsonrpc::JSON_STRING,"object_id",jsonrpc::JSON_STRING,"owner_vsID",jsonrpc::JSON_STRING,"voterInfo",jsonrpc::JSON_STRING, NULL), &server::GetReceiptI);
        }

        inline virtual void SendVoterInfoI(const Json::Value &request, Json::Value &response)
        {
            response = this->SendVoterInfo(request["action"].asString(), request["class_id"].asString(), request["host_url"].asString(), request["object_id"].asString(), request["owner_vsID"].asString(), request["voterInfo"].asString());
        }
        inline virtual void GetAuthMessageI(const Json::Value &request, Json::Value &response)
        {
            response = this->GetAuthMessage(request["action"].asString(), request["class_id"].asString(), request["host_url"].asString(), request["machineId"].asString(), request["message"].asString(), request["object_id"].asString(), request["owner_vsID"].asString(), request["voterInfo"].asString());
        }
        inline virtual void GetBallotI(const Json::Value &request, Json::Value &response)
        {
            response = this->GetBallot(request["action"].asString(), request["class_id"].asString(), request["host_url"].asString(), request["message"].asString(), request["object_id"].asString(), request["owner_vsID"].asString(), request["voterInfo"].asString());
        }
        inline virtual void SendVoteI(const Json::Value &request, Json::Value &response)
        {
            response = this->SendVote(request["action"].asString(), request["class_id"].asString(), request["host_url"].asString(), request["object_id"].asString(), request["owner_vsID"].asString(), request["vote"].asString(), request["voterInfo"].asString());
        }
        inline virtual void GetReceiptI(const Json::Value &request, Json::Value &response)
        {
            response = this->GetReceipt(request["action"].asString(), request["class_id"].asString(), request["host_url"].asString(), request["machineId"].asString(), request["message"].asString(), request["object_id"].asString(), request["owner_vsID"].asString(), request["voterInfo"].asString());
        }
        virtual Json::Value SendVoterInfo(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID, const std::string& voterInfo) = 0;
        virtual Json::Value GetAuthMessage(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& machineId, const std::string& message, const std::string& object_id, const std::string& owner_vsID, const std::string& voterInfo) = 0;
        virtual Json::Value GetBallot(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& message, const std::string& object_id, const std::string& owner_vsID, const std::string& voterInfo) = 0;
        virtual Json::Value SendVote(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID, const std::string& vote, const std::string& voterInfo) = 0;
        virtual Json::Value GetReceipt(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& machineId, const std::string& message, const std::string& object_id, const std::string& owner_vsID, const std::string& voterInfo) = 0;
};

#endif //JSONRPC_CPP_STUB_SERVER_H_
