/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_CLIENT_H_
#define JSONRPC_CPP_STUB_CLIENT_H_

#include <jsonrpccpp/client.h>

class client : public jsonrpc::Client
{
    public:
        client(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        Json::Value SendVoterInfo(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID, const std::string& voterInfo) 
        {
            Json::Value p;
            p["action"] = action;
            p["class_id"] = class_id;
            p["host_url"] = host_url;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            p["voterInfo"] = voterInfo;
            Json::Value result = this->CallMethod("SendVoterInfo",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value GetAuthMessage(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& machineId, const std::string& message, const std::string& object_id, const std::string& owner_vsID, const std::string& voterInfo) 
        {
            Json::Value p;
            p["action"] = action;
            p["class_id"] = class_id;
            p["host_url"] = host_url;
            p["machineId"] = machineId;
            p["message"] = message;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            p["voterInfo"] = voterInfo;
            Json::Value result = this->CallMethod("GetAuthMessage",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value GetBallot(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& message, const std::string& object_id, const std::string& owner_vsID, const std::string& voterInfo) 
        {
            Json::Value p;
            p["action"] = action;
            p["class_id"] = class_id;
            p["host_url"] = host_url;
            p["message"] = message;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            p["voterInfo"] = voterInfo;
            Json::Value result = this->CallMethod("GetBallot",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value SendVote(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID, const std::string& vote, const std::string& voterInfo) 
        {
            Json::Value p;
            p["action"] = action;
            p["class_id"] = class_id;
            p["host_url"] = host_url;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            p["vote"] = vote;
            p["voterInfo"] = voterInfo;
            Json::Value result = this->CallMethod("SendVote",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value GetReceipt(const std::string& action, const std::string& class_id, const std::string& host_url, const std::string& machineId, const std::string& message, const std::string& object_id, const std::string& owner_vsID, const std::string& voterInfo) 
        {
            Json::Value p;
            p["action"] = action;
            p["class_id"] = class_id;
            p["host_url"] = host_url;
            p["machineId"] = machineId;
            p["message"] = message;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            p["voterInfo"] = voterInfo;
            Json::Value result = this->CallMethod("GetReceipt",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
};

#endif //JSONRPC_CPP_STUB_CLIENT_H_
